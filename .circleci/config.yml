version: 2.1

parameters:
  image_repo:
    type: string
    default: htapi
  deploy_latest:
    type: boolean
    default: false
  deploy_target:
    type: enum
    enum: ["demo", "demo1", "demo2", "demo3", "demo4"]
    default: "demo"

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-eks: circleci/aws-eks@2.1.2
  kubernetes: circleci/kubernetes@1.3.0
  helm: circleci/helm@1.2.0

executors:
  terraform:
    docker:
      - image: alpine/terragrunt:1.0.11
    working_directory: ~/project
  java:
    docker:
      - image: cimg/openjdk:17.0.3

  python-executor:
    docker:
      - image: 'cimg/python:3.10'

commands:
  setup_aws_credentials:
    steps:
      - run:
          name: Setup AWS credentials
          command: |
            mkdir ~/.aws
            touch ~/.aws/credentials
            printf "[$aws_account_profile_name]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" >> ~/.aws/credentials

  add_vcs_provider_to_ssh_known_hosts:
    steps:
      - run:
          name: Add VCS providers to ~/.ssh/known_hosts
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            ssh-keyscan -t rsa github.com ~/.ssh/known_hosts

  save_surefire_test_results:
    steps:
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results

jobs:
  validate_infrastructure:
    parameters:
      infra_directory:
        type: string
    executor: terraform
    steps:
      - attach_workspace:
          at: .
      - add_vcs_provider_to_ssh_known_hosts
      - setup_aws_credentials
      - run:
          command: terragrunt validate
          working_directory: << parameters.infra_directory >>
      - persist_to_workspace:
          root: .
          paths:
            - infrastructure

  prepare_infrastructure:
    executor:
      name: terraform
    steps:
      - attach_workspace:
          at: .
      - add_vcs_provider_to_ssh_known_hosts
      - setup_aws_credentials
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - infrastructure

  plan_infrastructure:
    parameters:
      infra_directory:
        type: string
    executor: terraform
    steps:
      - attach_workspace:
          at: .
      - add_vcs_provider_to_ssh_known_hosts
      - setup_aws_credentials
      - run:
          command: terragrunt plan --terragrunt-non-interactive -out .tfplan
          working_directory: << parameters.infra_directory >>
      - persist_to_workspace:
          root: .
          paths:
            - infrastructure

  apply_infrastructure:
    parameters:
      infra_directory:
        type: string
    executor: terraform
    steps:
      - attach_workspace:
          at: .
      - add_vcs_provider_to_ssh_known_hosts
      - setup_aws_credentials
      - run:
          command: terragrunt apply -auto-approve --terragrunt-non-interactive .tfplan
          working_directory: << parameters.infra_directory >>

  unit-test:
    executor: java
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - run: make clean
      - run: |
          make test
          COVERAGE="$(awk -F"," '{ instructions += $4 + $5; covered += $5 } END {  print 100*covered/instructions  }' target/my-reports/jacoco.csv)"
          echo $COVERAGE
          currenttime=$(date +%s)
          curl  -X POST -H "Content-type: application/json" -d '{ "series" :[{"metric":"code_coverage","points":[['$currenttime', '$COVERAGE']],"type":"count","interval": 100,"host":"'$CIRCLE_BUILD_URL'","tags":["branch:'$CIRCLE_BRANCH'","service:healthtracker-rest-api"]}]}' "https://api.datadoghq.com/api/v1/series?api_key={$DD_API_KEY}"
      - save_surefire_test_results


  build:
    executor: java
    resource_class: large
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - run: make clean
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run: make package
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - save_surefire_test_results
      - persist_to_workspace:
          root: .
          paths:
            - target
            - Dockerfile

  build-and-push-image:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          repo: << pipeline.parameters.image_repo >>
          tag: ${CIRCLE_SHA1}
          attach-workspace: true
          checkout: false
          extra-build-args: --no-cache
      - run:
          name: Store digest of image
          command: |
            IMAGE="${AWS_ECR_ACCOUNT_URL}/<< pipeline.parameters.image_repo >>:${CIRCLE_SHA1}"
            IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE | cut -d '@' -f 2)
            echo "Image: ${IMAGE}"
            echo "Digest: ${AWS_ECR_ACCOUNT_URL}/<< pipeline.parameters.image_repo >>@${IMAGE_DIGEST}"
            echo ${IMAGE_DIGEST} > image-digest
      - persist_to_workspace:
          root: .
          paths:
            - image-digest

  deploy:
    executor: python-executor
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region of AWS
        type: string
      helm-version:
        description: |
          Helm client version
        type: string
      namespace:
        description: |
          Namespace to deploy resource
        type: string
      account-url:
        description: |
          url of repository
        type: string
      repo:
        description: |
          name of repository
        type: string
      release-name:
        description: |
          release name
        type: string
      values-file:
        description: |
          values (env) file
        type: string
      value-overrides:
        description: |
          value overrides (comma separated)
        type: string
        default: ""
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          echo "export IMAGE_DIGEST=$(cat ./image-digest)" >> $BASH_ENV
      - run: |
          echo "if [ -n '$CIRCLE_TAG' ]; then TARGET=$CIRCLE_TAG; else TARGET=$(git rev-parse --abbrev-ref HEAD | sed 's/.*\///g'); fi" >> $BASH_ENV
          echo 'export DD_VERSION=$TARGET-$(git rev-parse --short HEAD)' >> $BASH_ENV
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
      - helm/upgrade-helm-chart:
          namespace: << parameters.namespace >>
          chart: ./.helm
          atomic: true
          release-name: << parameters.release-name >>
          helm-version: << parameters.helm-version >>
          values: << parameters.values-file >>
          values-to-override: image.digest=${IMAGE_DIGEST},image.version=${DD_VERSION},<< parameters.value-overrides >>

  deploy_latest:
    executor: python-executor
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region of AWS
        type: string
      helm-version:
        description: |
          Helm client version
        type: string
      account-url:
        description: |
          url of repository
        type: string
      repo:
        description: |
          name of repository
        type: string
      release-name:
        description: |
          release name
        type: string
    steps:
      - checkout
      - run: |
          echo "if [ -n '$CIRCLE_TAG' ]; then TARGET=$CIRCLE_TAG; else TARGET=$(git rev-parse --abbrev-ref HEAD | sed 's/.*\///g'); fi" >> $BASH_ENV
          echo 'export DD_VERSION=$TARGET-$(git rev-parse --short HEAD)' >> $BASH_ENV
      - run: |
          echo "export IMAGE_TAG=$(git log --tags="v*" -1 | grep commit | awk '{print $2}')" >> $BASH_ENV
      - run: |
          echo "export VALUES_FILE=.helm/values-<< pipeline.parameters.deploy_target >>.yaml" >> $BASH_ENV
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
      - helm/upgrade-helm-chart:
          chart: ./.helm
          atomic: true
          helm-version: << parameters.helm-version >>
          release-name: << parameters.release-name >>
          namespace: << pipeline.parameters.deploy_target >>
          values: ${VALUES_FILE}
          values-to-override: image.tag=${IMAGE_TAG},image.version=${DD_VERSION}

  uninstall:
    executor: python-executor
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region of AWS
        type: string
      helm-version:
        description: |
          Helm client version
        type: string
      namespace:
        description: |
          Namespace to deploy resource
        type: string
      release-name:
        description: |
          release name
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
      - helm/delete-helm-release:
          helm-version: << parameters.helm-version >>
          release-name: << parameters.release-name >>
          namespace: << parameters.namespace >>
          timeout: 600s

workflows:
  version: 2
  code-coverage:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - unit-test:
          context: app-acceptance

  development:
    when:
      not: << pipeline.parameters.deploy_latest >>
    jobs:
      - prepare_infrastructure:
          context:
            - aws-direct
          filters:
            branches:
              only:
                - /^snyk-.*/
                - /^dependabot/.*/
                - /^feature/.*/
                - /^bugfix/.*/
                - /^chore/.*/
                - /^integration/.*/
                - develop

      - validate_infrastructure:
          infra_directory: infrastructure/direct/dev
          context:
            - aws-direct
          requires:
            - prepare_infrastructure

      - plan_infrastructure:
          infra_directory: infrastructure/direct/dev
          context:
            - aws-direct
          requires:
            - validate_infrastructure

      - approve_infrastructure:
          type: approval
          requires:
            - plan_infrastructure

      - apply_infrastructure:
          infra_directory: infrastructure/direct/dev
          context:
            - aws-direct
          requires:
            - approve_infrastructure

      - build:
          filters:
            branches:
              only:
                - /^snyk-.*/
                - /^dependabot/.*/
                - /^feature/.*/
                - /^bugfix/.*/
                - /^chore/.*/
                - /^integration/.*/
                - develop
      - approval:
          type: approval
          requires:
            - build
      - build-and-push-image:
          name: development-ecr
          context: app-dev
          requires:
            - approval
      - deploy:
          context:
            - app-dev
            - eks-dev-2022
          name: development-deploy
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          namespace: ${EKS_NAMESPACE}
          account-url: AWS_ECR_ACCOUNT_URL
          repo: << pipeline.parameters.image_repo >>
          release-name: ht-api-dev
          values-file: .helm/values-dev.yaml
          requires:
            - development-ecr
            - apply_infrastructure

  demo:
    when:
      and:
        - << pipeline.parameters.deploy_latest >>
        - equal: [demo, << pipeline.parameters.deploy_target >>]
    jobs:
      - deploy_latest:
          name: demo-deploy
          context:
            - app-dev
            - eks-dev-2022
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          # namespace: demo
          account-url: AWS_ECR_ACCOUNT_URL
          repo: << pipeline.parameters.image_repo >>
          release-name: ht-api-demo
          # values-file: .helm/values-demo.yaml

  demo_acceptance:
    when:
      and:
        - << pipeline.parameters.deploy_latest >>
        - or:
            - equal: [demo1, << pipeline.parameters.deploy_target >>]
            - equal: [demo2, << pipeline.parameters.deploy_target >>]
            - equal: [demo3, << pipeline.parameters.deploy_target >>]
            - equal: [demo4, << pipeline.parameters.deploy_target >>]
    jobs:
      - deploy_latest:
          name: demo1-deploy
          context:
            - app-acceptance
            - eks-accept-2022
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          account-url: AWS_ECR_ACCOUNT_URL
          repo: health-tracker-server
          release-name: ht-api-demo

  acceptance:
    when:
      not: << pipeline.parameters.deploy_latest >>
    jobs:
      - prepare_infrastructure:
          context:
            - aws-direct
          filters:
            branches:
              only:
                # uncomment to deploy feature to acceptance
                #- /^(feature|bugfix)/.*/
                - develop

      - validate_infrastructure:
          infra_directory: infrastructure/direct/acceptance
          context:
            - aws-direct
          requires:
            - prepare_infrastructure

      - plan_infrastructure:
          infra_directory: infrastructure/direct/acceptance
          context:
            - aws-direct
          requires:
            - validate_infrastructure

      - apply_infrastructure:
          infra_directory: infrastructure/direct/acceptance
          context:
            - aws-direct
          requires:
            - plan_infrastructure

      - build:
          filters:
            branches:
              only:
                # uncomment to deploy feature to acceptance
                #- /^(feature|bugfix)/.*/
                - develop
      - build-and-push-image:
          context: app-acceptance
          name: acceptance-ecr
          requires:
            - build
      - deploy:
          context:
            - app-acceptance
            - eks-accept-2022
          name: acceptance-deploy
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          namespace: ${EKS_NAMESPACE}
          account-url: AWS_ECR_ACCOUNT_URL
          repo: << pipeline.parameters.image_repo >>
          release-name: ht-api-acceptance
          values-file: .helm/values-acceptance.yaml
          requires:
            - acceptance-ecr
            - apply_infrastructure

  staging:
    jobs:
      - prepare_infrastructure:
          context:
            - app-staging
          filters:
            branches:
              only:
                - /^release/.*/
                - /^hotfix/.*/

      - validate_infrastructure:
          infra_directory: infrastructure/cleardata/staging
          context:
            - app-staging
          requires:
            - prepare_infrastructure

      - plan_infrastructure:
          infra_directory: infrastructure/cleardata/staging
          context:
            - app-staging
          requires:
            - validate_infrastructure

      - apply_infrastructure:
          infra_directory: infrastructure/cleardata/staging
          context:
            - app-staging
          requires:
            - plan_infrastructure

      - build:
          filters:
            branches:
              only:
                - /^release/.*/
                - /^hotfix/.*/
      - build-and-push-image:
          name: staging-ecr
          context: app-staging
          requires:
            - build
      - deploy:
          context:
            - app-staging
            - eks-staging-2022
          name: staging-deploy
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          namespace: ${EKS_NAMESPACE}
          account-url: AWS_ECR_ACCOUNT_URL
          repo: << pipeline.parameters.image_repo >>
          release-name: ht-api-staging
          values-file: .helm/values-staging.yaml
          requires:
            - staging-ecr
            - apply_infrastructure


  preprod:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master

  production:
    jobs:
      - prepare_infrastructure:
          context:
            - app-production
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/

      - validate_infrastructure:
          infra_directory: infrastructure/cleardata/prod
          context:
            - app-production
          requires:
            - prepare_infrastructure
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/

      - plan_infrastructure:
          infra_directory: infrastructure/cleardata/prod
          context:
            - app-production
          requires:
            - validate_infrastructure
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/

      - approve_infrastructure:
          type: approval
          requires:
            - plan_infrastructure
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/

      - apply_infrastructure:
          infra_directory: infrastructure/cleardata/prod
          context:
            - app-production
          requires:
            - approve_infrastructure
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/

      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/
      - build-and-push-image:
          name: production-ecr
          context: app-production
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/
      - approval:
          type: approval
          requires:
            - production-ecr
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/
      - deploy:
          name: production-deploy
          context:
            - app-production
            - eks-prod-2022
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          namespace: ${EKS_NAMESPACE}
          account-url: AWS_ECR_ACCOUNT_URL
          repo: << pipeline.parameters.image_repo >>
          release-name: ht-api-prod
          values-file: .helm/values-production.yaml
          requires:
            - approval
            - apply_infrastructure
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)/

  # Canary workflow triggers on tags named like v1.0.0-canary.0
  canary:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)-canary(\.\d*)?/
      - build-and-push-image:
          name: production-ecr
          context:
            - app-production
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)-canary(\.\d*)?/
      - approval:
          type: approval
          requires:
            - production-ecr
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)-canary(\.\d*)?/
      - deploy:
          name: production-deploy-canary
          context:
            - app-production
            - eks-prod-2021
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          namespace: ${EKS_NAMESPACE}
          account-url: AWS_ECR_ACCOUNT_URL
          repo: << pipeline.parameters.image_repo >>
          value-overrides: canaryRelease=true,replicaCount=1
          release-name: ht-api-prod-canary
          values-file: .helm/values-production.yaml
          requires:
            - approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)-canary(\.\d*)?/
      - approval:
          name: approve-removal
          type: approval
          requires:
            - production-deploy-canary
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)-canary(\.\d*)?/
      - uninstall:
          name: remove-canary
          context:
            - app-production
            - eks-prod-2021
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          helm-version: "v3.5.4"
          namespace: ${EKS_NAMESPACE}
          release-name: ht-api-prod-canary
          requires:
            - approve-removal
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v(?<Major>0|(?:[0-9]\d*))(?:\.(?<Minor>0|(?:[1-9]\d*))(?:\.(?<Patch>0|(?:[1-9]\d*)))?)-canary(\.\d*)?/
